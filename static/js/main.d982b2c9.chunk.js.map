{"version":3,"sources":["component/ForecastCard.js","component/Forecast.js","component/weather.jsx","App.js","index.js"],"names":["ForecastCard","props","Container","fluid","Row","className","Col","Card","Content","Header","day","icon1","description","Meta","tempMin","tempMax","Description","extra","daysString","0","1","2","3","4","5","6","Forecast","useState","setTempMin","setTempMax","getDescription","getDay","useEffect","console","log","e","getdate","splitDays","findMin","findMax","a","days","day_max","i","length","hours","map","hour","main","temp_max","max","Math","push","day_min","temp_min","min","array","size","index","slice","fiveDay","day1","Date","k","fetch","tempCity","api_call","json","response","cod","forecast","list","desList","weather","item","getFahrenheit","getforecast","class","scales","Weather","convertTemp","temp","newTemp","dec","tempScale","calCelsius","currentTemp","setTempScale","city","icon","Button","variant","onClick","cell","floor","location","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","App","setCurrentTemp","setCity","setTempCity","input","setInput","setIcon","getCurrentWeather","role","style","background","process","Form","onSubmit","name","preventDefault","Control","onChange","target","value","type","placeholder","ReactDOM","render","basename","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.d982b2c9.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { Card, Icon, Image } from 'semantic-ui-react'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { icon1 } from '../App'\n\nconst ForecastCard = (props) => (\n\n    <Container fluid={true}>\n        <Row className='projectsBox'>\n            <Col className=\"forecastcards\">\n                <Card >\n\n                    <Card.Content>\n                        <Card.Header> {props.day[0]} <i className={`wi ${icon1[props.description[0]]}`} />   </Card.Header>\n                        <Card.Meta>\n                            <div className='min' > {props.tempMin[0]} </div>\n                            <div className='max'> {props.tempMax[0]} </div>\n                        </Card.Meta>\n                        <Card.Description>\n                            {props.description[0]}\n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                    </Card.Content>\n                </Card>\n            </Col>\n            <Col className=\"forecastcards\">\n                <Card >\n                    <Card.Content>\n                        <Card.Header> {props.day[1]}<i className={`wi ${icon1[props.description[1]]}`} />  </Card.Header>\n                        <Card.Meta>\n                            <div className='min' > {props.tempMin[1]} </div>\n                            <div className='max'> {props.tempMax[1]} </div>\n                        </Card.Meta>\n                        <Card.Description>\n                            {props.description[1]}\n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                    </Card.Content>\n                </Card>\n            </Col>\n            <Col className=\"forecastcards\">\n                <Card >\n                    <Card.Content>\n                        <Card.Header>{props.day[2]} <i className={`wi ${icon1[props.description[2]]}`} /> </Card.Header>\n                        <Card.Meta>\n                            <div className='min' > {props.tempMin[2]} </div>\n                            <div className='max'> {props.tempMax[2]} </div>\n                        </Card.Meta>\n                        <Card.Description>\n                            {props.description[2]}\n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                    </Card.Content>\n                </Card>\n            </Col>\n            <Col className=\"forecastcards\">\n                <Card >\n                    <Card.Content>\n                        <Card.Header> {props.day[3]}  <i className={`wi ${icon1[props.description[3]]}`} /></Card.Header>\n                        <Card.Meta>\n                            <div className='min' > {props.tempMin[3]} </div>\n                            <div className='max'> {props.tempMax[3]} </div>\n                        </Card.Meta>\n                        <Card.Description>\n                            {props.description[3]}\n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                    </Card.Content>\n                </Card>\n            </Col>\n\n            <Col className=\"forecastcards\">\n                <Card >\n                    <Card.Content>\n                        <Card.Header>{props.day[4]} <i className={`wi ${icon1[props.description[4]]}`} /> </Card.Header>\n                        <Card.Meta>\n                            <div className='min' > {props.tempMin[4]} </div>\n                            <div className='max'> {props.tempMax[4]} </div>\n                        </Card.Meta>\n                        <Card.Description>\n                            {props.description[4]}\n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n\n                    </Card.Content>\n                </Card>\n            </Col>\n        </Row >\n    </Container >\n)\n\nexport default ForecastCard","import React from 'react'\nimport { useState, useEffect, useRef } from 'react';\nimport { calCelsius, getFahrenheit } from \"./weather\";\nimport { Container } from 'react-bootstrap';\nimport ForecastCard from './ForecastCard';\n\n\n\nconst API_Key = \"3bd8c061d50496738722309b7ed91dda\";\nconst days = []\nconst daysString = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tues',\n    3: 'Wed',\n    4: 'Thurs',\n    5: 'Fri',\n    6: 'Sat',\n}\n\n\nexport default function Forecast(props) {\n\n    const [currentTemp, setCurrentTemp] = useState()\n    const [tempMin, setTempMin] = useState([]);\n    const [tempMax, setTempMax] = useState([]);\n    const [description, getDescription] = useState([])\n    const [input, setInput] = useState(0)\n    const [time, getTime] = useState()\n    const [day, getDay] = useState([])\n\n\n\n    useEffect(() => {\n        console.log('useEffect Forecast called')\n        const getforecast = async (e) => {\n            //5 day forecast is available at any location or city. It includes weather data every 3 hours.\n            const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${props.tempCity}&appid=${API_Key}`);\n            //\n            const response = await api_call.json();\n            console.log(response)\n\n            if (response.cod !== \"200\") {\n                return\n            }\n\n            function getdate() {\n                let fiveDay = []\n                let getToday = new Date()\n                let day1 = getToday.getDay()\n                for (let i = day1; i < day1 + 5; i++) {\n                    let k = i\n                    if (k >= 7) {\n                        k = k - 7\n                    }\n                    fiveDay.push(daysString[i, k])\n                }\n                return fiveDay\n            }\n\n            const forecast = getdate()\n\n            getDay([...forecast])\n\n\n            // setCurrentTemp(response.main.temp)\n            // console.log(response.list[0].dt)\n            //item.main.temp_min\n\n            function splitDays(array, size) {\n                let days = []\n                let index = 0;\n                while (index < array.length) {\n                    days.push(array.slice(index, size + index));\n                    index += size;\n                }\n                return days;\n            }\n\n\n            let days = splitDays(response.list, 8)\n\n            //location of the temp_min \n            // console.log(day1[0].main.temp_min)\n            // let max = Math.max(...hours)\n            // max: max\n\n            function findMin(days) {\n                let day_min = []\n                for (let i = 0; i < days.length; i++) {\n                    let day = days[i]\n                    let hours = day.map(hour => hour.main.temp_min)\n\n                    let min = Math.min(...hours)\n                    day_min.push({ min: min });\n                }\n                return day_min;\n            }\n\n            function findMax(days) {\n                let day_max = [];\n                for (let i = 0; i < days.length; i++) {\n                    let day = days[i]\n                    let hours = day.map(hour => hour.main.temp_max)\n\n                    let max = Math.max(...hours)\n                    day_max.push({ max: max });\n                }\n                return day_max;\n            }\n\n\n            const desList = [days[0][0].weather[0].main, days[1][0].weather[0].main, days[2][0].weather[0].main, days[3][0].weather[0].main, days[4][0].weather[0].main]\n\n\n\n\n            const min = findMin(days).map(item =>\n                <div>{getFahrenheit(item.min)}</div>\n            )\n\n            const max = findMax(days).map(item =>\n                <div> {getFahrenheit(item.max)} </div>)\n\n            setTempMin([...min])\n            setTempMax([...max])\n            getDescription([...desList])\n\n\n            // tempMin = [...result]\n        }\n        getforecast();\n\n    }, [props.tempCity]);\n\n    return (\n        <body className=\"forecast\">\n            <Container className=\"forecast\">\n                <div class=\"d-flex flex-row d-flex justify-content-around\">\n                    <ForecastCard tempMin={tempMin} tempMax={tempMax} day={day} description={description} />\n                </div>\n            </Container >\n        </body>\n\n\n\n\n    )\n}\n\n\n","import React, { useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Forecast from \"./Forecast\";\n\nconst scales = {\n    KELVIN: 'kelvin',\n    CELSIUS: 'celsius',\n    FAHRENHEIT: 'fahrenheit'\n}\n\nconst location = {\n    city: undefined\n}\n\nconst Weather = props => {\n    function convertTemp(temp) {\n        let dec = ''\n        let newTemp\n\n        if (tempScale === scales.CELSIUS) {\n            newTemp = calCelsius(temp)\n            dec = 'C'\n        }\n        if (tempScale === scales.FAHRENHEIT) {\n            newTemp = getFahrenheit(temp)\n            dec = 'F'\n        }\n        if (tempScale === scales.KELVIN) {\n            newTemp = temp\n        }\n        return (\n            <div>\n                {newTemp} {dec} &deg;\n\n             </div>\n        );\n    }\n    const { currentTemp, tempMin, tempMax, description } = props\n    //tempScale is the scale we want to convert to\n    const [tempScale, setTempScale] = useState(scales.FAHRENHEIT)\n    // const [location, setLocation]= useState(location.city) \n\n    function onClickConvertScale() {\n\n        if (tempScale === scales.FAHRENHEIT) {\n            setTempScale(scales.CELSIUS)\n        }\n        if (tempScale === scales.CELSIUS) {\n            setTempScale(scales.FAHRENHEIT)\n        }\n\n    }\n\n    return (\n\n        < div className=\"container body\">\n            <div className=\"cards\"></div>\n            <div className=\"cityHeader\"> {props.city} </div>\n            <h2 className=\"py-4\">\n                <div className=\"icons\"><i className={`wi ${props.icon}`} /></div>\n            </h2>\n            <h2 className=\"py-2\"> Current {convertTemp(currentTemp)} </h2>\n\n            {/** show max n min temp*/}\n            <div>\n                <h2 className=\" d-flex justify-content-around\">\n                    <div> min{convertTemp(tempMin)}</div>\n                    <div>max{convertTemp(tempMax)}</div>\n                </h2>\n            </div>\n\n            {/* Weather description */}\n            <h3 className=\"py-3 \">\n                {description}\n            </h3>\n            <div className=\"d-flex justify-content-end\">\n                <Button className=\"clear\" variant=\"light\" onClick={onClickConvertScale} > C / F </Button>\n\n            </div>\n        </div >\n\n    );\n\n\n\n}\nexport default Weather;\n\n\nexport function getFahrenheit(newTemp) {\n    const cell = calCelsius(newTemp)\n    return Math.floor(cell * (9 / 5) + 32);\n}\n\nexport function calCelsius(newTemp) {\n    let cell = Math.floor(newTemp - 273.15);\n    return cell;\n}\n","import Weather from './component/weather'\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport { Container, Button, InputGroup, Form, Col, FormControl, Row } from 'react-bootstrap';\nimport Forecast from './component/Forecast';\n\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_Key = \"d06db66101a950f6afc113f4474df923\";\n\nlet location = {\n    city: 'San Francisco',\n}\n\nexport const icon1 = {\n    Thunderstorm: \"wi-thunderstorm\",\n    Drizzle: \"wi-sleet\",\n    Rain: \"wi-storm-showers\",\n    Snow: \"wi-snow\",\n    Atmosphere: \"wi-fog\",\n    Clear: \"wi-day-sunny\",\n    Clouds: \"wi-day-fog\"\n};\n\n\nfunction App() {\n    const [currentTemp, setCurrentTemp] = useState()\n    const [city, setCity] = useState(location.city);\n    const [tempCity, setTempCity] = useState(location.city);\n    const [tempMin, setTempMin] = useState(0);\n    const [tempMax, setTempMax] = useState(0);\n    const [description, getDescription] = useState()\n    const [input, setInput] = useState('')\n    const [icon, setIcon] = useState('')\n\n    function onChangeSearchCity(e) {\n\n        console.log(e.target.value)\n        setInput(e.target.value)\n    }\n    function onSubmitSearchCity(e, name) {\n        console.log('onSubmitSearchCity called')\n\n        setTempCity(input)\n        e.preventDefault()\n        return false\n    }\n\n    useEffect(() => {\n        console.log('useEffect called')\n        const getCurrentWeather = async (e) => {\n\n            const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${tempCity}&appid=${API_Key}`);\n            //5 day forecast is available at any location or city. It includes weather data every 3 hours.\n\n            //\n            const response = await api_call.json();\n            // console.log(response)\n\n            if (response.cod !== 200) {\n                return\n\n\n            }\n            console.log(response)\n            setCity(tempCity)\n\n            setTempMin(response.main.temp_min)\n\n            setTempMax(response.main.temp_max)\n\n            getDescription(response.weather[0].description)\n\n            setCurrentTemp(response.main.temp)\n\n            setIcon(response.weather[0].main)\n\n\n        }\n        getCurrentWeather();\n    }, [tempCity]);\n    // const data={\n    //   description={description} \n    // }\n    // console.log(setCity)\n\n    return (\n        <div className=\"App \" >\n            <header className=\"App-header background\" role=\"main\" style={{\n                background: `url(\"${process.env.PUBLIC_URL + '/background.jpg'}\") no-repeat center / cover `\n            }}  >\n                <Container  >\n                    <Form onSubmit={onSubmitSearchCity}  >\n                        <Form.Row className=\"px-4 d-flexcenter\">\n                            <Col className=\"pd-25\">\n                                <Form.Control onChange={onChangeSearchCity} name=\"city\" type=\"text\" placeholder=\"City\">\n                                </Form.Control >\n                            </Col>\n                            <Button variant=\"light\" size=\"md\" type=\"submit\">\n                                Search\n            </Button>\n                        </Form.Row>\n                    </Form>\n                    <Weather icon={icon1[icon]} tempMin={tempMin} tempMax={tempMax} city={city}\n                        description={description} currentTemp={currentTemp}\n                    />\n                </Container>\n\n            </header>\n\n            <Forecast tempCity={tempCity} />\n\n        </div >\n    );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <BrowserRouter basename=\"/WeatherForecast\">\n        <Switch>\n            <Route exact path=\"/\" component={App} />\n        </Switch>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}